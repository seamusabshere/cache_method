0.3.0 / 2022-10-16

* Enhancements

  * Ruby 3.x support

* Breaking changes

  * Cache key format changed to include kwargs; existing caches will be invalidated on upgrade

0.2.7 / 2015-04-03

* Enhancements

  * CacheMethod.config.default_generational_ttl so that generations can expire - thanks @itspriddle https://github.com/seamusabshere/cache_method/pull/10

0.2.6 / 2013-05-13

* Enhancements

  * cache_method_clear_on - for when a cache should be cleared whenever another method is called - thanks @rubemz ! https://github.com/seamusabshere/cache_method/pull/4
  * hypothetically more useful output when you require 'cache_method/debug'

0.2.5 / 2012-04-24

* Enhancements

  * If you immediately obtain the fetch mutex, don't double-get because for all you know you're the first setter
  * Better debug logging (require 'cache_method/debug')

0.2.4 / 2012-04-17

* Enhancements

  * Refactored to simplify and make thread-safe

0.2.3 / 2012-04-06

* Enhancements

  * Make it possible to work with proxies by defining #to_cache_key which---unlike #as_cache_key---does not cause #class to be run

0.2.2 / 2012-03-02

* Enhancements

  * Class name is now force-prepended to the result of #as_cache_key. This prevents objects of different classes that have the same #as_cache_key from being confused with each other. In any case, this sort of duck typing (?) doesn't seem appropriate for cache keys.
  * Enable "debug mode" by requiring "cache_method/debug"... it helps you find cache keys that are suspiciously long (and therefore slow to digest).

0.2.1 / 2012-03-01

* Enhancements

  * Use user-defined #as_cache_key for both obj and args digests (cache keys); previously it was only used for obj

0.2.0 / 2012-02-29

* API changes:

  * #clear_method_cache -> #cache_method_clear
  * #method_cache_hash -> #as_cache_key (see README)
  * doesn't rely on #hash at all any more (http://numbers.brighterplanet.com/2012/02/29/beware-of-string-hash-being-used-for-cache-keys/)
  * doesn't try to mitigate differences between Ruby 1.8 and 1.9 splats (http://www.ruby-forum.com/topic/98106)

* Enhancements

  * clearer method naming, I think
  * safer determination of cache keys - previously, in effect, args.map(&:to_s) was being used
  * no more autoload
  * remove direct dependency on activesupport
  * tests now run with dalli, green on MRI 1.8, MRI 1.9, and jruby 1.6.7

0.1.7 / yanked!

* Bug: used args.map(&:hash) instead of args.map(&:to_s)... which was actually worse because #hash is different across processes.

0.1.6 / November 17, 2011

* Last release before CHANGELOG in place
